s=input()
z=list(s)
for i in z:
    if ((i==" ") or (i=="-")):
        z.remove(i)
for j in z:
    if j=='-':
        z.remove(j)
n=len(z)
a=0
while(n>=3):
    for j in range(0,3):
        print(z[j+a],end='')
    if(n!=3):
        print("-",end='')
    n-=3
    a=a+j+1
    if(n==4):
        for i in range(n//2):
            print(z[i+a],end='')
        print("-",end='')
        n-=2
        a=a+i+1
if(n==2):
    for k in range(n):
        print(z[k+a],end='')
     


s=input().split()
a=[]
for i in s:
    a.append(i)
n=len(a)
b=n
m=0
while(n>0):
    for i in range(b):
        z=len(a[i])
        for j in range(z):
            print(a[i][j+m],end='')
            break
    m=m+j+1
    print(" ",end='')
    n-=1
    


#include<stdio.h>
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
int main(){
    int a,b,c,d,p,q,r,s;
    scanf("%d%d%d%d",&a,&b,&c,&d);
    p=max(max(a,b),max(c,d));
    s=min(min(a,b),min(c,d));
    q=min(max(a,b),max(c,d));
    r=max(min(a,b),min(c,d));
    if(q>r)
        printf("%d > %d > %d >%d",p,q,r,s);
    else
        printf("%d > %d > %d > %d",p,r,q,s);
}

#include<stdio.h>
int main()
{
    int a,b,c,d;
    scanf("%d%d%d%d",&a,&b,&c,&d);
    if(a>b && a>c && a>d){
        if(b>c && b>d){
            if(c>d)
                printf("%d > %d > %d > %d",a,b,c,d);
            else
                printf("%d > %d > %d > %d",a,b,d,c);
        }
        else if(c>b && c>d){
            if(b>d)
                printf("%d > %d > %d > %d",a,c,b,d);
            else
                printf("%d > %d > %d > %d",a,c,d,b);
        }
        else if(d>b && d>c){
            if(c>b)
                printf("%d > %d > %d > %d",a,d,c,b);
            else
                printf("%d > %d > %d > %d",a,d,b,c);
        }
    }
    else if(b>c && b>d && b>a){
        if(a>c && a>d){
            if(c>d)
                printf("%d > %d > %d > %d",b,a,c,d);
            else
                printf("%d > %d > %d > %d",b,a,d,c);
        }
        else if(c>d && c>a){
            if(a>d)
                printf("%d > %d > %d > %d",b,c,a,d);
            else
                printf("%d > %d > %d > %d",b,c,d,a);
        }
        else if(d>a && d>c){
            if(a>c)
                printf("%d > %d > %d > %d",b,d,a,c);
            else
                printf("%d > %d > %d > %d",b,d,c,a);
        }
    }
    else if(b>c && b>d && b>a){
        if(a>c && a>d){
            if(c>d)
                printf("%d > %d > %d > %d",b,a,c,d);
            else
                printf("%d > %d > %d > %d",b,a,d,c);
        }
        else if(c>d && c>a){
            if(a>d)
                printf("%d > %d > %d > %d",b,c,a,d);
            else
                printf("%d > %d > %d > %d",b,c,d,a);
        }
        else if(d>a && d>c){
            if(a>c)
                printf("%d > %d > %d > %d",b,d,a,c);
            else
                printf("%d > %d > %d > %d",b,d,c,a);
        }
    }
    else if(c>a && c>d && c>b){
        if(a>b && a>d){
            if(b>d)
                printf("%d > %d > %d > %d"c,a,b,d);
            else
                printf("%d > %d > %d > %d",c,a,d,b);
        }
        else if b>d && b>a){
            if(a>d)
                printf("%d > %d > %d > %d",c,b,a,d);
            else
                printf("%d > %d > %d > %d",c,b,d,a);
        }
        else if(d>a && d>b){
            if(a>b)
                printf("%d > %d > %d > %d",c,d,a,b);
            else
                printf("%d > %d > %d > %d",c,d,b,a);
        }
    }
    else{
        if(a>b && a>c){
            if(b>c)
                printf("%d > %d > %d > %d",d,a,b,c);
            else
                printf("%d > %d > %d > %d",d,a,c,b);
        }
        else if b>c && b>a){
            if(a>c)
                printf("%d > %d > %d > %d",d,b,a,c);
            else
                printf("%d > %d > %d > %d",d,b,c,a);
        }
        else if(c>a && c>b){
            if(a>b)
                printf("%d > %d > %d > %d",d,c,a,b);
            else
                printf("%d > %d > %d > %d",d,c,b,a);
        }
    }
}

import json
s=input()
s=s.split("#")
l=list(s[0])
num=int(s[1])
ans=[]
for i in l:
    if i=='-':
        l.remove(i)
for itr in range(1,num+1):
    if str(itr) in l:
        ans.append("Push")
    else:
        ans.append("Push")
        ans.append("Pop")
    if str(itr)==l[-1]:
        break
print(json.dumps(ans))

print("Meena")


from collections import Counter
from heapq import nlargest
n=int(input())
ans=[]
for i in range(n):
    s=input().split(' ')
    for j in range(len(s)):
        if s[j].startswith('#'):
            ans.append(s[j])
res=Counter(ans)
result=dict(res)
print(str(res.most_common()))
'''z=nlargest(5,result, key=result.get)
for k in z:
    print(k)''
-------------------------------------------------------------------------
							STACK :
class perform:
    def __init__(self,stack):
        self.stack=stack
    def push(self):
        add=int(input('Enter value to be pushed : '))
        self.stack.append(add)
    def pop(self):
        print('The popped element is :',self.stack.pop())
stack=[]
while True:
    num=int(input('Enter your choice : '))
    ans=perform(stack)
    if num==1:
        ans.push()
    elif num==2:
        ans.pop()
    elif num==3:
        stack.sort(reverse=True)
        print('stack elements are :',stack)
    elif num==4:
        print('Exit')
        break
    else:
        print('Invalid Choice')
--------------------------------------------------------------
							CLASS AND OBJECTS :
class studentDetails:
    name = input('Enter name : ')
    regno = input('Enter regno : ')
    branch = input('Enter branch : ')
    sem = input('Enter sem : ')
    def display(self):
        print('Name :',self.name)
        print('Regno :',self.regno)
        print('Branch :',self.branch)
        print('Sem :',self.sem)
result=studentDetails()
result.display()
-----------------------------------------------------------------------------------------
class date:
    year = input('Enter year : ')
    month = input('Enter month : ')
    date = input('Enter date : ')
    def display(self):
        print('Today\'s Date in dd/mm/yyyy format :',self.date+'/'+self.month+'/'+self.year)
result=date()
result.display()
-------------------------------------------------------------------------------------------
class largestNumber:
    n1,n2 = input('Enter 2 numbers : ').split()
    def display(self):
        if self.n1>self.n2:
            print('Biggest number is',self.n1)
        else:
            print('Biggest number is',self.n2)
result=largestNumber()
result.display()
-------------------------------------------------------------------------------
							CONSTRUCTOR AND DESTRUCTOR :
class studentDetails:
    def __init__(self,name,rollno,address,zipcode):
        print('The entered student details are shown below ::-----------')
        self.name=name
        self.rollno=rollno
        self.address=address
        self.zipcode=zipcode
    def display(self):
        print('Student Name ::',self.name)
        print('Roll no is ::',self.rollno)
        print('Address is ::',self.address)
        print('Zipcode is ::',self.zipcode)
        print('Student Detail is Closed...............')
print('This is student details constructor called..............')
name=input('Enter the student name :: ')
rollno=input('Enter the student roll no :: ')
address=input('Enter the student address :: ')
zipcode=input('Enter the zipcode :: ')
s=studentDetails(name,rollno,address,zipcode)
s.display()
--------------------------------------------------------------------------------------------
								QUEUE :
class perform:
    def __init__(self,queue):
        self.queue=queue
    def insert(self):
        c=0
        add=int(input('Insert the element in queue : '))
        self.queue.insert(c,add)
        c+=1
    def delete(self):
        print('Element deleted from queue is :',self.queue.pop())
queue=[]
while True:
    num=int(input('Enter your choice : '))
    ans=perform(queue)
    if num==1:
        ans.insert()
    elif num==2:
        ans.delete()
    elif num==3:
        queue.sort()
        print('Queue elements are :',queue)
    elif num==4:
        print('Exit')
        break
    else:
        print('Invalid Choice')
------------------------------------------------------------------------------------------------
							SINGLE INHERITANCE :
class base:
    a, b = map(int, input("Enter two numbers : ").split())
class derived(base):
    def mul(self):
        print("a :",self.a)
        print("b :",self.b)
        print("c :",self.a*self.b)
object=derived()
object.mul()
-------------------------------------------------------------------------------------------------------
							MULTIPLE INHERITANCE :
class base1:
    m=int(input())
class base2:
    n=int(input())
class derived(base1,base2):
    def mul(self):
        print("m :",self.m)
        print("n :",self.n)
        print("m*n :",self.m*self.n)
object=derived()
object.mul()
------------------------------------------------------------------------------------------------------------
							MULTILEVEL INHERITANCE :
class base:
    a,b=map(int,input().split(' '))
    def add(self):
        print("a+b =",self.a+self.b)
class derived1(base):
    c=int(input())
    def sub(self):
        print("sub =",(self.a+self.b)-self.c)
class derived2(derived1):
    def total(self):
        print("Arithmetic")
d=derived2()
d.total()
d.sub()
d.add()
------------------------------------------------------------------------------------------------------------------------
							HIERARCHICAL INHERITANCE :
class base:
    def add(self):
        print("This is add")
class derived1(base):
    def sub(self):
        print("This is sub")
class derived2(base):
    def total(self):
        print("Arithmetic")
d1=derived1()
d2=derived2()
d1.add()
d1.sub()
d2.add()
d2.total()
-----------------------------------------------------------------------------------------------------------------------------------
							HYBRID INHERITANCE :
class base1:
    roll=int(input())
    def add(self):
        print("Roll no ::",self.roll)
        print("Marks obtained :")
class base2(base1):
    part1=float(input())
    part2,sports=map(int,input().split(' '))
    def sub(self):
        print("Part1 =",self.part1)
        print("Part2 =",self.part2)
        print("Sports =",self.sports)
class derived(base2):
    def total(self):
        print("Total score =",self.part1+self.part2+self.sports)
d1=derived()
d1.add()
d1.sub()
d1.total()
-----------------------------------------------------------------------------------------------------------------------------------
							LINKED LIST :

